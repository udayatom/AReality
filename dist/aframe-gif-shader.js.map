{"version":3,"file":"aframe-gif-shader.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO,+CAA+C;AAChE,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO,iDAAiD;AAChE;AACA;AACA,IAAI,OAAO;AACX;;AAEA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;UCvFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN4C;;AAE5C;AACA;AACA;;AAEA;AACA,QAAQ,WAAW;AACnB,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,WAAW,eAAe;;AAE1B;AACA,WAAW,eAAe;AAC1B,gBAAgB,eAAe;AAC/B,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,qBAAqB;AACvE;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB;;AAEA;AACA;AACA;AACA,qBAAqB,aAAa,SAAS,SAAS;AACpD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,YAAY,gBAAgB;;AAE5B;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR,0BAA0B,QAAQ;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,MAAM;AACN;AACA,eAAe;AACf;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC","sources":["webpack://aframe-gif-shader/./lib/gifsparser.js","webpack://aframe-gif-shader/webpack/bootstrap","webpack://aframe-gif-shader/webpack/runtime/make namespace object","webpack://aframe-gif-shader/./index.js"],"sourcesContent":["/**\n * \n * Gif parser by @gtk2k\n * https://github.com/gtk2k/gtk2k.github.io/tree/master/animation_gif\n *\n */\n\nexports.parseGIF = function (gif, successCB, errorCB) {\n\n  var pos = 0;\n  var delayTimes = [];\n  var loadCnt = 0;\n  var graphicControl = null;\n  var imageData = null;\n  var frames = [];\n  var loopCnt = 0;\n  if (gif[0] === 0x47 && gif[1] === 0x49 && gif[2] === 0x46 && // 'GIF'\n    gif[3] === 0x38 && (gif[4] === 0x39 || gif[4] === 0x37) && gif[5] === 0x61) { // '89a'\n    pos += 13 + (+!!(gif[10] & 0x80) * Math.pow(2, (gif[10] & 0x07) + 1) * 3);\n    var gifHeader = gif.subarray(0, pos);\n    while (gif[pos] && gif[pos] !== 0x3b) {\n      var offset = pos, blockId = gif[pos];\n      if (blockId === 0x21) {\n        var label = gif[++pos];\n        if ([0x01, 0xfe, 0xf9, 0xff].indexOf(label) !== -1) {\n          label === 0xf9 && (delayTimes.push((gif[pos + 3] + (gif[pos + 4] << 8)) * 10));\n          label === 0xff && (loopCnt = gif[pos + 15] + (gif[pos + 16] << 8));\n          while (gif[++pos]) pos += gif[pos];\n          label === 0xf9 && (graphicControl = gif.subarray(offset, pos + 1));\n        } else { errorCB && errorCB('parseGIF: unknown label'); break; }\n      } else if (blockId === 0x2c) {\n        pos += 9;\n        pos += 1 + (+!!(gif[pos] & 0x80) * (Math.pow(2, (gif[pos] & 0x07) + 1) * 3));\n        while (gif[++pos]) pos += gif[pos];\n        var imageData = gif.subarray(offset, pos + 1);\n        // Each frame should have an image and a flag to indicate how to dispose it.\n        var frame = {\n          // http://matthewflickinger.com/lab/whatsinagif/animation_and_transparency.asp\n          // Disposal method is a flag stored in the 3rd byte of the graphics control\n          // This byte is packed and stores more information, only 3 bits of it represent the disposal\n          disposalMethod: graphicControl[3],\n          blob:URL.createObjectURL(new Blob([gifHeader, graphicControl, imageData]))\n        }\n        frames.push(frame);\n      } else { errorCB && errorCB('parseGIF: unknown blockId'); break; }\n      pos++;\n    }\n  } else { errorCB && errorCB('parseGIF: no GIF89a'); }\n  if (frames.length) {\n\n    var cnv = document.createElement('canvas');      \n    var loadImg = function () {\n      for(var i = 0; i < frames.length; i++){\n        var img = new Image();\n        img.onload = function (e, i) {\n          if (i === 0) {\n            cnv.width = img.width\n            cnv.height = img.height\n          }\n          loadCnt++;\n          frames[i] = this;\n          if (loadCnt === frames.length) {\n            loadCnt = 0;\n            imageFix(1);\n          }\n        }.bind(img, null, i);\n        // Link html image tag with the extracted GIF Frame \n        img.src = frames[i].blob;\n        img.disposalMethod = frames[i].disposalMethod;\n      }\n    }\n    var imageFix = function (i) {\n      var img = new Image();\n      img.onload = function (e, i) {\n        loadCnt++;\n        frames[i] = this;\n        if (loadCnt === frames.length) {\n          cnv = null;\n          successCB && successCB(delayTimes, loopCnt, frames);\n        } else {\n          imageFix(++i);\n        }\n      }.bind(img);\n      img.src = cnv.toDataURL('image/gif');\n    }\n    loadImg();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { parseGIF } from \"./lib/gifsparser\";\n\nif (typeof AFRAME === \"undefined\") {\n  throw \"Component attempted to register before AFRAME was available.\";\n}\n\n/* get util from AFRAME */\nconst { parseUrl } = AFRAME.utils.srcLoader;\nconst { debug } = AFRAME.utils;\n// debug.enable('shader:gif:*')\ndebug.enable(\"shader:gif:warn\");\nconst warn = debug(\"shader:gif:warn\");\nconst log = debug(\"shader:gif:debug\");\n\n/* store data so that you won't load same data */\nconst gifData = {};\n\n/* create error message */\nfunction createError(err, src) {\n  return { status: \"error\", src: src, message: err, timestamp: Date.now() };\n}\n\nAFRAME.registerShader(\"gif\", {\n  /**\n   * For material component:\n   * @see https://github.com/aframevr/aframe/blob/60d198ef8e2bfbc57a13511ae5fca7b62e01691b/src/components/material.js\n   * For example of `registerShader`:\n   * @see https://github.com/aframevr/aframe/blob/41a50cd5ac65e462120ecc2e5091f5daefe3bd1e/src/shaders/flat.js\n   * For MeshBasicMaterial\n   * @see http://threejs.org/docs/#Reference/Materials/MeshBasicMaterial\n   */\n  schema: {\n    /* For material */\n    color: { type: \"color\" },\n    fog: { default: true },\n\n    /* For texuture */\n    src: { default: null },\n    autoplay: { default: true },\n  },\n\n  /**\n   * Initialize material. Called once.\n   * @protected\n   */\n  init(data) {\n    log(\"init\", data);\n    log(this.el.components);\n    this.__cnv = document.createElement(\"canvas\");\n    //this.__cnv.width = 2;\n    //this.__cnv.height = 2;\n    this.__ctx = this.__cnv.getContext(\"2d\");\n    this.__texture = new THREE.Texture(this.__cnv); //renders straight from a canvas\n    if (data.repeat) {\n      this.__texture.wrapS = THREE.RepeatWrapping;\n      this.__texture.wrapT = THREE.RepeatWrapping;\n      this.__texture.repeat.set(data.repeat.x, data.repeat.y);\n    }\n    this.__material = {};\n    this.__reset();\n    this.material = new THREE.MeshBasicMaterial({ map: this.__texture });\n    this.el.sceneEl.addBehavior(this);\n    return this.material;\n  },\n\n  /**\n   * Update or create material.\n   * @param {object|null} oldData\n   */\n  update(oldData) {\n    log(\"update\", oldData);\n    this.__updateMaterial(oldData);\n    this.__updateTexture(oldData);\n    return this.material;\n  },\n\n  /**\n   * Called on each scene tick.\n   * @protected\n   */\n  tick(t) {\n    if (!this.__frames || this.paused()) return;\n    if (Date.now() - this.__startTime >= this.__nextFrameTime) {\n      this.nextFrame();\n    }\n  },\n\n  /*================================\n  =            material            =\n  ================================*/\n\n  /**\n   * Updating existing material.\n   * @param {object} data - Material component data.\n   */\n  __updateMaterial(data) {\n    const { material } = this;\n    const newData = this.__getMaterialData(data);\n    Object.keys(newData).forEach((key) => {\n      material[key] = newData[key];\n    });\n  },\n\n  /**\n   * Builds and normalize material data, normalizing stuff along the way.\n   * @param {Object} data - Material data.\n   * @return {Object} data - Processed material data.\n   */\n  __getMaterialData(data) {\n    return {\n      fog: data.fog,\n      color: new THREE.Color(data.color),\n    };\n  },\n\n  /*==============================\n  =            texure            =\n  ==============================*/\n\n  /**\n   * set texure\n   * @private\n   * @param {Object} data\n   * @property {string} status - success / error\n   * @property {string} src - src url\n   * @property {array} times - array of time length of each image\n   * @property {number} cnt - total counts of gif images\n   * @property {array} frames - array of each image\n   * @property {Date} timestamp - created at the texure\n   */\n\n  __setTexure(data) {\n    log(\"__setTexure\", data);\n    if (data.status === \"error\") {\n      warn(`Error: ${data.message}\\nsrc: ${data.src}`);\n      this.__reset();\n    } else if (data.status === \"success\" && data.src !== this.__textureSrc) {\n      this.__reset();\n      /* Texture added or changed */\n      this.__ready(data);\n    }\n  },\n\n  /**\n   * Update or create texure.\n   * @param {Object} data - Material component data.\n   */\n  __updateTexture(data) {\n    const { src, autoplay } = data;\n\n    /* autoplay */\n    if (typeof autoplay === \"boolean\") {\n      this.__autoplay = autoplay;\n    } else if (typeof autoplay === \"undefined\") {\n      this.__autoplay = true;\n    }\n    if (this.__autoplay && this.__frames) {\n      this.play();\n    }\n\n    /* src */\n    if (src) {\n      this.__validateSrc(src, this.__setTexure.bind(this));\n    } else {\n      /* Texture removed */\n      this.__reset();\n    }\n  },\n\n  /*=============================================\n  =            varidation for texure            =\n  =============================================*/\n\n  __validateSrc(src, cb) {\n    /* check if src is a url */\n    const url = parseUrl(src);\n    if (url) {\n      this.__getImageSrc(url, cb);\n      return;\n    }\n\n    let message;\n\n    /* check if src is a query selector */\n    const el = this.__validateAndGetQuerySelector(src);\n    if (!el || typeof el !== \"object\") {\n      return;\n    }\n    if (el.error) {\n      message = el.error;\n    } else {\n      const tagName = el.tagName.toLowerCase();\n      if (tagName === \"video\") {\n        src = el.src;\n        message = \"For video, please use `aframe-video-shader`\";\n      } else if (tagName === \"img\") {\n        this.__getImageSrc(el.src, cb);\n        return;\n      } else {\n        message = `For <${tagName}> element, please use \\`aframe-html-shader\\``;\n      }\n    }\n\n    /* if there is message, create error data */\n    if (message) {\n      const srcData = gifData[src];\n      const errData = createError(message, src);\n      /* callbacks */\n      if (srcData && srcData.callbacks) {\n        srcData.callbacks.forEach((cb) => cb(errData));\n      } else {\n        cb(errData);\n      }\n      /* overwrite */\n      gifData[src] = errData;\n    }\n  },\n\n  /**\n   * Validate src is a valid image url\n   * @param  {string} src - url that will be tested\n   * @param  {function} cb - callback with the test result\n   */\n  __getImageSrc(src, cb) {\n    /* if src is same as previous, ignore this */\n    if (src === this.__textureSrc) {\n      return;\n    }\n\n    /* check if we already get the srcData */\n    let srcData = gifData[src];\n    if (!srcData || !srcData.callbacks) {\n      /* create callback */\n      srcData = gifData[src] = { callbacks: [] };\n      srcData.callbacks.push(cb);\n    } else if (srcData.src) {\n      cb(srcData);\n      return;\n    } else if (srcData.callbacks) {\n      /* add callback */\n      srcData.callbacks.push(cb);\n      return;\n    }\n    const tester = new Image();\n    tester.crossOrigin = \"Anonymous\";\n    tester.addEventListener(\"load\", (e) => {\n      /* check if it is gif */\n      this.__getUnit8Array(src, (arr) => {\n        if (!arr) {\n          onError(\"This is not gif. Please use `shader:flat` instead\");\n          return;\n        }\n        /* parse data */\n        parseGIF(\n          arr,\n          (times, cnt, frames) => {\n            /* store data */\n            const newData = {\n              status: \"success\",\n              src: src,\n              times: times,\n              cnt: cnt,\n              frames: frames,\n              timestamp: Date.now(),\n            };\n            /* callbacks */\n            if (srcData.callbacks) {\n              srcData.callbacks.forEach((cb) => cb(newData));\n              /* overwrite */\n              gifData[src] = newData;\n            }\n          },\n          (err) => onError(err)\n        );\n      });\n    });\n    tester.addEventListener(\"error\", (e) =>\n      onError(\n        \"Could be the following issue\\n - Not Image\\n - Not Found\\n - Server Error\\n - Cross-Origin Issue\"\n      )\n    );\n    function onError(message) {\n      /* create error data */\n      const errData = createError(message, src);\n      /* callbacks */\n      if (srcData.callbacks) {\n        srcData.callbacks.forEach((cb) => cb(errData));\n        /* overwrite */\n        gifData[src] = errData;\n      }\n    }\n    tester.src = src;\n  },\n\n  /**\n   *\n   * get mine type\n   *\n   */\n  __getUnit8Array(src, cb) {\n    if (typeof cb !== \"function\") {\n      return;\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", src);\n    xhr.responseType = \"arraybuffer\";\n    xhr.addEventListener(\"load\", (e) => {\n      const uint8Array = new Uint8Array(e.target.response);\n      const arr = uint8Array.subarray(0, 4);\n      // const header = arr.map(value => value.toString(16)).join('')\n      let header = \"\";\n      for (let i = 0; i < arr.length; i++) {\n        header += arr[i].toString(16);\n      }\n      if (header === \"47494638\") {\n        cb(uint8Array);\n      } else {\n        cb();\n      }\n    });\n    xhr.addEventListener(\"error\", (e) => {\n      log(e);\n      cb();\n    });\n    xhr.send();\n  },\n\n  /**\n   * Query and validate a query selector,\n   *\n   * @param  {string} selector - DOM selector.\n   * @return {object} Selected DOM element | error message object.\n   */\n  __validateAndGetQuerySelector(selector) {\n    try {\n      var el = document.querySelector(selector);\n      if (!el) {\n        return { error: \"No element was found matching the selector\" };\n      }\n      return el;\n    } catch (e) {\n      // Capture exception if it's not a valid selector.\n      return { error: \"no valid selector\" };\n    }\n  },\n\n  /*================================\n  =            playback            =\n  ================================*/\n\n  /**\n   * Pause gif\n   * @public\n   */\n  pause() {\n    log(\"pause\");\n    this.__paused = true;\n  },\n\n  /**\n   * Play gif\n   * @public\n   */\n  play() {\n    log(\"play\");\n    this.__paused = false;\n  },\n\n  /**\n   * Toggle playback. play if paused and pause if played.\n   * @public\n   */\n\n  togglePlayback() {\n    if (this.paused()) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  },\n\n  /**\n   * Return if the playback is paused.\n   * @public\n   * @return {boolean}\n   */\n  paused() {\n    return this.__paused;\n  },\n\n  /**\n   * Go to next frame\n   * @public\n   */\n  nextFrame() {\n    this.__draw();\n\n    /* update next frame time */\n    while (Date.now() - this.__startTime >= this.__nextFrameTime) {\n      this.__nextFrameTime += this.__delayTimes[this.__frameIdx++];\n      if (\n        (this.__infinity || this.__loopCnt) &&\n        this.__frameCnt <= this.__frameIdx\n      ) {\n        /* go back to the first */\n        this.__frameIdx = 0;\n      }\n    }\n  },\n\n  /*==============================\n   =            canvas            =\n   ==============================*/\n\n  /**\n   * clear canvas\n   * @private\n   */\n  __clearCanvas() {\n    this.__ctx.clearRect(0, 0, this.__width, this.__height);\n    this.__texture.needsUpdate = true;\n  },\n\n  /**\n   * draw\n   * @private\n   */\n  __draw() {\n    if (this.__frameIdx != 0) {\n      const lastFrame = this.__frames[this.__frameIdx - 1];\n      // Disposal method indicates if you should clear or not the background.\n      // This flag is represented in binary and is a packed field which can also represent transparency.\n      // http://matthewflickinger.com/lab/whatsinagif/animation_and_transparency.asp\n      if (lastFrame.disposalMethod == 8 || lastFrame.disposalMethod == 9) {\n        this.__clearCanvas();\n      }\n    } else {\n      this.__clearCanvas();\n    }\n    const actualFrame = this.__frames[this.__frameIdx];\n    if (typeof actualFrame !== \"undefined\") {\n      this.__ctx.drawImage(actualFrame, 0, 0, this.__width, this.__height);\n      this.__texture.needsUpdate = true;\n    }\n  },\n\n  /*============================\n  =            ready            =\n  ============================*/\n\n  /**\n   * setup gif animation and play if autoplay is true\n   * @private\n   * @property {string} src - src url\n   * @param {array} times - array of time length of each image\n   * @param {number} cnt - total counts of gif images\n   * @param {array} frames - array of each image\n   */\n  __ready({ src, times, cnt, frames }) {\n    log(\"__ready\");\n    this.__textureSrc = src;\n    this.__delayTimes = times;\n    cnt ? (this.__loopCnt = cnt) : (this.__infinity = true);\n    this.__frames = frames;\n    this.__frameCnt = times.length;\n    this.__startTime = Date.now();\n    this.__width = THREE.MathUtils.floorPowerOfTwo(frames[0].width);\n    this.__height = THREE.MathUtils.floorPowerOfTwo(frames[0].height);\n    this.__cnv.width = this.__width;\n    this.__cnv.height = this.__height;\n    this.__draw();\n    if (this.__autoplay) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  },\n\n  /*=============================\n  =            reset            =\n  =============================*/\n  /**\n   * @private\n   */\n  __reset() {\n    this.pause();\n    this.__clearCanvas();\n    this.__startTime = 0;\n    this.__nextFrameTime = 0;\n    this.__frameIdx = 0;\n    this.__frameCnt = 0;\n    this.__delayTimes = null;\n    this.__infinity = false;\n    this.__loopCnt = 0;\n    this.__frames = null;\n    this.__textureSrc = null;\n  },\n});\n"],"names":[],"sourceRoot":""}